import ipaddress
import logging
import os
import sys
import requests
from bs4 import BeautifulSoup
import time

# Logging configuration
LOG_FILE = "logs/weak_login_errors.log"

def setup_logging():
    """Set up logging for error messages."""
    os.makedirs("logs", exist_ok=True)
    os.makedirs("outputs", exist_ok=True)
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                        format="%(asctime)s - ERROR - %(message)s")

def log_error(message):
    """Log an error message and print to console."""
    logging.error(message)
    print(f"\n‚ö† ERROR: {message}\n")
    if os.path.exists(LOG_FILE):
        print(f"‚ö† The error has been logged in: {LOG_FILE}")

def check_root_privileges():
    """Ensure the script is run with root privileges."""
    if os.geteuid() != 0:
        log_error("Root privileges are required to run this script. Exiting.")
        sys.exit(1)

def validate_input(input_url):
    """Validates the URL and prevents scanning public IPs."""
    if not input_url.strip():
        log_error("‚ö† ERROR: Target IP required. Please try again.")
        sys.exit(1)

    # Check if input is an IP address
    try:
        ip_addr = ipaddress.ip_address(input_url)  # Try parsing as an IP
        if not ip_addr.is_private:
            log_error(f"‚ö† ERROR: Unauthorized scan attempt on public IP address {input_url}. Exiting.")
            sys.exit(1)
        return  # If it's a private IP, it's valid, skip further checks

    except ValueError:
        pass  # Not an IP, continue to check if it's a valid URL

    # Validate URL format
    if not input_url.startswith(("http://", "https://")):
        log_error("Invalid URL format! Please enter a URL that starts with http:// or https://")
        sys.exit(1)

    return input_url  # Return the valid URL

def find_login_fields(url):
    """Find username and password fields in a login form."""
    try:
        print("\n[+] Searching for the login form.....")
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)

        if response.status_code != 200:
            log_error("Could not load the page. Please check the URL.")
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        form = soup.find("form")  # Look for the first form in the page

        if not form:
            log_error("No login form found. This may not be a standard login page.")
            return None

        # Find input fields in the form
        input_fields = {}
        for input_tag in form.find_all("input"):
            field_name = input_tag.get("name")
            if field_name:
                input_fields[field_name] = input_tag.get("type", "text")

        if len(input_fields) < 2:
            log_error("Could not detect username and password fields. Exiting...")
            return None

        print(f"[!] Found form fields: {input_fields}")
        return input_fields

    except requests.exceptions.RequestException as e:
        log_error(f"Could not connect to {url}. Details: {e}")
        return None

def test_rate_limiting(url, form_fields):
    """Check if login form has rate limiting and CAPTCHA protection."""
    if not form_fields:
        log_error("No login form found, skipping rate limiting test.")
        return "No Form Detected", None

    print("\n[+] Starting login attempts to check for security features.....")

    session = requests.Session()  # Keep session open for multiple attempts
    detected_captcha = False  # Track if CAPTCHA is found
    rate_limiting_detected = False

    for attempt in range(5):  # Try logging in 5 times
        data = {
            list(form_fields.keys())[0]: "admin",  # First field (username/email)
            list(form_fields.keys())[1]: "password",  # Second field (password)
        }

        try:
            response = session.post(url, headers={"User-Agent": "Mozilla/5.0"}, data=data, timeout=10)
            print(f"üîÑ Attempt {attempt + 1} - Status Code: {response.status_code}")

            # Look for CAPTCHA message
            if "captcha" in response.text.lower():
                print("[!] CAPTCHA detected after multiple attempts!")
                detected_captcha = True
                break  # Stop testing if CAPTCHA is triggered

            # Check if responses are slowing down or changing
            if attempt > 0 and response.status_code == 429:  # 429 = Too Many Requests (Rate Limiting)
                print("[!] Rate limiting detected (Too Many Requests error)!")
                rate_limiting_detected = True
                break

            time.sleep(2)  # Pause between attempts to mimic human behavior

        except requests.exceptions.RequestException as e:
            log_error(f"Could not send login request. Details: {e}")
            return "Error", None

    # Determine rate limiting & CAPTCHA results
    captcha_result = "CAPTCHA Exists" if detected_captcha else "No CAPTCHA Detected"
    rate_limit_result = "Rate Limiting Exists" if rate_limiting_detected else "No Rate Limiting"

    return captcha_result, rate_limit_result

def show_banner():
    """Display the banner and ethical warning."""
    print("\n============================================================")
    print("üöÄ Welcome to the Weak Login Security Tester! üöÄ")
    print("‚ö† This tool is for ethical hacking and learning purposes only.")
    print("‚ö† Do not use it on unauthorized targets.")
    print("============================================================\n")

    print("\n==================================================================")
    print(" WARNING: This tool is for ethical use only.")
    print("By using this tool, you agree to:")
    print("1. Use it only in controlled environments (e.g., CTFs).")
    print("2. Never use it to scan unauthorized targets.")
    print("3. Abide by all applicable laws and policies.")
    print("==================================================================\n") 

    agreement = input("Do you agree to these terms? [yes/no]: ").strip().lower()
    if agreement == "no":
        log_error("User declined the ethical use agreement.")
        print("‚ö† You must agree to the terms to use this tool. Exiting.")
        sys.exit(1)
    elif agreement != "yes":
        log_error(f"Invalid response to ethical agreement: '{agreement}'.")
        print("‚ö† Invalid input. Please restart the script and respond with 'yes' or 'no'. Exiting.")
        sys.exit(1)

def run_weak_login_test():
    """Main function to automate weak login form testing."""
    setup_logging()
    check_root_privileges()  # üöÄ **Added root privilege check here**
    show_banner()

    login_url = input("\nüîç Enter the login page URL to test (e.g., http://testphp.vulnweb.com/login.php): ").strip()
    validated_url = validate_input(login_url)

    print("\nüîç Checking login form security.....")

    try:
        form_fields = find_login_fields(validated_url)

        if form_fields:
            captcha_result, rate_limit_result = test_rate_limiting(validated_url, form_fields)

            # Print summary in terminal
            print("\n====================== SUMMARY ======================")
            print(f"üîç **Target Tested:** {validated_url}")
            print(f"üîé **CAPTCHA Detection:** {captcha_result}")
            print(f"üìå **Rate Limiting:** {rate_limit_result}")
            print("\n‚úÖ **Test completed successfully.**")
            print("=====================================================\n")

    except Exception as e:
        log_error(f"\n‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    run_weak_login_test()
