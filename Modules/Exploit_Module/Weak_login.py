import ipaddress
import logging
import os
import sys
import requests
from bs4 import BeautifulSoup
import time

# Logging configuration
LOG_FILE = "logs/weak_login_errors.log"

def setup_logging():
    """Set up logging for error messages."""
    os.makedirs("logs", exist_ok=True)
    os.makedirs("outputs", exist_ok=True)
    logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                        format="%(asctime)s - ERROR - %(message)s")

def log_error(message):
    """Log an error message and print to console."""
    logging.error(message)
    print(f"\n‚ö† ERROR: {message}\n")
    if os.path.exists(LOG_FILE):
        print(f"‚ö† The error has been logged in: {LOG_FILE}")

def validate_input(input_url):
    """Validates the URL and prevents scanning public IPs."""
    if not input_url.strip():
        log_error("‚ö† ERROR: Target IP required. Please try again.")
        sys.exit(1)

    try:
        ip_addr = ipaddress.ip_address(input_url)
        if not ip_addr.is_private:
            log_error(f"‚ö† ERROR: Unauthorized scan attempt on public IP address {input_url}. Exiting.")
            sys.exit(1)
        return
    except ValueError:
        pass

    if not input_url.startswith(("http://", "https://")):
        log_error("Invalid URL format! Please enter a URL that starts with http:// or https://")
        sys.exit(1)

    return input_url

def find_login_fields(url):
    """Find username and password fields in a login form."""
    try:
        print("\n[+] Searching for the login form.....")
        response = requests.get(url, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)

        if response.status_code != 200:
            log_error("Could not load the page. Please check the URL.")
            return None

        soup = BeautifulSoup(response.text, "html.parser")
        form = soup.find("form")

        if not form:
            log_error("No login form found. This may not be a standard login page.")
            return None

        input_fields = {}
        for input_tag in form.find_all("input"):
            field_name = input_tag.get("name")
            if field_name:
                input_fields[field_name] = input_tag.get("type", "text")

        if len(input_fields) < 2:
            log_error("Could not detect username and password fields. Exiting...")
            return None

        print(f"[!] Found form fields: {input_fields}")
        return input_fields

    except requests.exceptions.RequestException as e:
        log_error(f"Could not connect to {url}. Details: {e}")
        return None

def test_rate_limiting(url, form_fields):
    """Check if login form has rate limiting and CAPTCHA protection."""
    if not form_fields:
        log_error("No login form found, skipping rate limiting test.")
        return "No Form Detected", None

    print("\n[+] Starting login attempts to check for security features.....")

    session = requests.Session()
    detected_captcha = False
    rate_limiting_detected = False

    for attempt in range(5):
        data = {
            list(form_fields.keys())[0]: "admin",
            list(form_fields.keys())[1]: "password",
        }

        try:
            response = session.post(url, headers={"User-Agent": "Mozilla/5.0"}, data=data, timeout=10)
            print(f"üîÑ Attempt {attempt + 1} - Status Code: {response.status_code}")

            if "captcha" in response.text.lower():
                print("[!] CAPTCHA detected after multiple attempts!")
                detected_captcha = True
                break

            if attempt > 0 and response.status_code == 429:
                print("[!] Rate limiting detected (Too Many Requests error)!")
                rate_limiting_detected = True
                break

            time.sleep(2)

        except requests.exceptions.RequestException as e:
            log_error(f"Could not send login request. Details: {e}")
            return "Error", None

    captcha_result = "CAPTCHA Exists" if detected_captcha else "No CAPTCHA Detected"
    rate_limit_result = "Rate Limiting Exists" if rate_limiting_detected else "No Rate Limiting"

    return captcha_result, rate_limit_result

def run_weak_login_test():
    """Main function to automate weak login form testing."""
    setup_logging()
    login_url = input("\nüîç Enter the login page URL to test (e.g., http://testphp.vulnweb.com/login.php): ").strip()
    validated_url = validate_input(login_url)

    print("\nüîç Checking login form security.....")

    try:
        form_fields = find_login_fields(validated_url)

        if form_fields:
            captcha_result, rate_limit_result = test_rate_limiting(validated_url, form_fields)

            print("\n====================== SUMMARY ======================")
            print(f"üîç **Target Tested:** {validated_url}")
            print(f"üîé **CAPTCHA Detection:** {captcha_result}")
            print(f"üìå **Rate Limiting:** {rate_limit_result}")
            print("\n‚úÖ **Test completed successfully.**")
            print("=====================================================")

    except Exception as e:
        log_error(f"\n‚ùå Unexpected error: {e}")

if __name__ == "__main__":
    run_weak_login_test()

# Explanation for the user
print("\n========== What the code has done ==========")
print("1. The tool first checks if the provided URL is valid and ensures it is a private IP.")
print("2. It attempts to find the login form by searching for input fields (username and password).")
print("3. The tool then performs a set of simulated login attempts with a username ('admin') and password ('password') to detect if CAPTCHA or rate limiting mechanisms are in place.")
print("4. If CAPTCHA is detected (the word 'captcha' is found in the page content), the tool logs that a CAPTCHA challenge exists.")
print("5. If rate limiting is detected (via a 429 status code after multiple failed login attempts), it logs that rate limiting is in effect.")
print("6. The results are summarized, indicating whether CAPTCHA or rate limiting was detected.")

print("\n========== What is CAPTCHA? ==========")
print("CAPTCHA (Completely Automated Public Turing test to tell Computers and Humans Apart) is a security mechanism used to differentiate between human users and automated bots. It is often used to prevent brute-force attacks, spam submissions, and abuse by automating systems.")
print("A CAPTCHA challenge usually involves solving puzzles, recognizing distorted text, or identifying objects in images.")

print("\n========== What is Rate Limiting? ==========")
print("Rate limiting is a technique used to control the number of requests a user can make to a service within a specified time frame. It is commonly used to prevent abuse, such as brute-force attacks, by restricting the number of login attempts or requests a user can make in a short period of time.")
print("If a system detects too many failed login attempts in a short period, it may return a 429 'Too Many Requests' HTTP status code, indicating that the rate limit has been exceeded.")
